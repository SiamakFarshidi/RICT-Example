//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.Language12
{
	/// <summary>
	/// DomainRelationship WorldHasContries
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language12.WorldHasContries.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language12.WorldHasContries.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language12.Language12DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("43f54d39-6096-4e31-9979-7a51660e64b6")]
	public partial class WorldHasContries : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// WorldHasContries domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x43f54d39, 0x6096, 0x4e31, 0x99, 0x79, 0x7a, 0x51, 0x66, 0x0e, 0x64, 0xb6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a WorldHasContries link in the same Partition as the given World
		/// </summary>
		/// <param name="source">World to use as the source of the relationship.</param>
		/// <param name="target">Country to use as the target of the relationship.</param>
		public WorldHasContries(World source, Country target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(WorldHasContries.WorldDomainRoleId, source), new DslModeling::RoleAssignment(WorldHasContries.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public WorldHasContries(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public WorldHasContries(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public WorldHasContries(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public WorldHasContries(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region World domain role code
		
		/// <summary>
		/// World domain role Id.
		/// </summary>
		public static readonly global::System.Guid WorldDomainRoleId = new global::System.Guid(0x10ece4d3, 0xf90d, 0x4169, 0x9d, 0x93, 0xb8, 0x44, 0x75, 0x43, 0xfa, 0xd6);
		
		/// <summary>
		/// DomainRole World
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.WorldHasContries/World.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.WorldHasContries/World.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.Language12.WorldHasContries/World.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("10ece4d3-f90d-4169-9d93-b8447543fad6")]
		public virtual World World
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (World)DslModeling::DomainRoleInfo.GetRolePlayer(this, WorldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, WorldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access World of a Country
		/// <summary>
		/// Gets World.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static World GetWorld(Country element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as World;
		}
		
		/// <summary>
		/// Sets World.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetWorld(Country element, World newWorld)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newWorld);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xbb9be549, 0xf004, 0x4b28, 0x99, 0xd1, 0x9e, 0x49, 0x02, 0x03, 0xa8, 0x6c);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.WorldHasContries/Element.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.WorldHasContries/Element.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "World", PropertyDisplayNameKey="Company.Language12.WorldHasContries/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bb9be549-f004-4b28-99d1-9e490203a86c")]
		public virtual Country Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Country)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a World
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Country> GetElements(World element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Country>, Country>(element, WorldDomainRoleId);
		}
		#endregion
		#region World link accessor
		/// <summary>
		/// Get the list of WorldHasContries links to a World.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language12.WorldHasContries> GetLinksToElements ( global::Company.Language12.World worldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.WorldHasContries>(worldInstance, global::Company.Language12.WorldHasContries.WorldDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the WorldHasContries link to a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language12.WorldHasContries GetLinkToWorld (global::Company.Language12.Country elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Language12.WorldHasContries> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.WorldHasContries>(elementInstance, global::Company.Language12.WorldHasContries.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region WorldHasContries instance accessors
		
		/// <summary>
		/// Get any WorldHasContries links between a given World and a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language12.WorldHasContries> GetLinks( global::Company.Language12.World source, global::Company.Language12.Country target )
		{
			global::System.Collections.Generic.List<global::Company.Language12.WorldHasContries> outLinks = new global::System.Collections.Generic.List<global::Company.Language12.WorldHasContries>();
			global::System.Collections.Generic.IList<global::Company.Language12.WorldHasContries> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.WorldHasContries>(source, global::Company.Language12.WorldHasContries.WorldDomainRoleId);
			foreach ( global::Company.Language12.WorldHasContries link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one WorldHasContries link between a given Worldand a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language12.WorldHasContries GetLink( global::Company.Language12.World source, global::Company.Language12.Country target )
		{
			global::System.Collections.Generic.IList<global::Company.Language12.WorldHasContries> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.WorldHasContries>(source, global::Company.Language12.WorldHasContries.WorldDomainRoleId);
			foreach ( global::Company.Language12.WorldHasContries link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Language12
{
	/// <summary>
	/// DomainRelationship CountryReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language12.CountryReferencesTargets.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language12.CountryReferencesTargets.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language12.Language12DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("162e6069-5ca9-4623-9c02-e43afb0af786")]
	public partial class CountryReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CountryReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x162e6069, 0x5ca9, 0x4623, 0x9c, 0x02, 0xe4, 0x3a, 0xfb, 0x0a, 0xf7, 0x86);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CountryReferencesTargets link in the same Partition as the given Country
		/// </summary>
		/// <param name="source">Country to use as the source of the relationship.</param>
		/// <param name="target">Country to use as the target of the relationship.</param>
		public CountryReferencesTargets(Country source, Country target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CountryReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(CountryReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CountryReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CountryReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CountryReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CountryReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xcc49ec82, 0x3d87, 0x4a48, 0xbf, 0xac, 0xa1, 0x8e, 0xfa, 0xcf, 0x76, 0x09);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.Language12.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.CountryReferencesTargets/Source.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.CountryReferencesTargets/Source.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.Language12.CountryReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cc49ec82-3d87-4a48-bfac-a18efacf7609")]
		public virtual Country Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Country)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a Country
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Country> GetSources(Country element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Country>, Country>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0xe90fedbc, 0x9d61, 0x4186, 0x8f, 0x24, 0x73, 0x1d, 0x43, 0x57, 0xa5, 0x9a);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.Language12.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.CountryReferencesTargets/Target.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.CountryReferencesTargets/Target.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.Language12.CountryReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e90fedbc-9d61-4186-8f24-731d4357a59a")]
		public virtual Country Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Country)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a Country
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Country> GetTargets(Country element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Country>, Country>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of CountryReferencesTargets links to a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language12.CountryReferencesTargets> GetLinksToTargets ( global::Company.Language12.Country sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CountryReferencesTargets>(sourceInstance, global::Company.Language12.CountryReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of CountryReferencesTargets links to a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language12.CountryReferencesTargets> GetLinksToSources ( global::Company.Language12.Country targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CountryReferencesTargets>(targetInstance, global::Company.Language12.CountryReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region CountryReferencesTargets instance accessors
		
		/// <summary>
		/// Get any CountryReferencesTargets links between a given Country and a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language12.CountryReferencesTargets> GetLinks( global::Company.Language12.Country source, global::Company.Language12.Country target )
		{
			global::System.Collections.Generic.List<global::Company.Language12.CountryReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Company.Language12.CountryReferencesTargets>();
			global::System.Collections.Generic.IList<global::Company.Language12.CountryReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CountryReferencesTargets>(source, global::Company.Language12.CountryReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.Language12.CountryReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CountryReferencesTargets link between a given Countryand a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language12.CountryReferencesTargets GetLink( global::Company.Language12.Country source, global::Company.Language12.Country target )
		{
			global::System.Collections.Generic.IList<global::Company.Language12.CountryReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CountryReferencesTargets>(source, global::Company.Language12.CountryReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.Language12.CountryReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Language12
{
	/// <summary>
	/// DomainRelationship CountryHasCities
	/// Description for Company.Language12.CountryHasCities
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language12.CountryHasCities.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language12.CountryHasCities.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language12.Language12DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("cb61ccc7-137e-45b4-abe8-aa57e625bc9f")]
	public partial class CountryHasCities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CountryHasCities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcb61ccc7, 0x137e, 0x45b4, 0xab, 0xe8, 0xaa, 0x57, 0xe6, 0x25, 0xbc, 0x9f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CountryHasCities link in the same Partition as the given Country
		/// </summary>
		/// <param name="source">Country to use as the source of the relationship.</param>
		/// <param name="target">City to use as the target of the relationship.</param>
		public CountryHasCities(Country source, City target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CountryHasCities.CountryDomainRoleId, source), new DslModeling::RoleAssignment(CountryHasCities.CityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CountryHasCities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CountryHasCities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CountryHasCities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CountryHasCities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Country domain role code
		
		/// <summary>
		/// Country domain role Id.
		/// </summary>
		public static readonly global::System.Guid CountryDomainRoleId = new global::System.Guid(0xb2fd9975, 0x9636, 0x4a5c, 0xb2, 0x37, 0xe1, 0xfb, 0xd4, 0xab, 0x12, 0x15);
		
		/// <summary>
		/// DomainRole Country
		/// Description for Company.Language12.CountryHasCities.Country
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.CountryHasCities/Country.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.CountryHasCities/Country.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Cities", PropertyDisplayNameKey="Company.Language12.CountryHasCities/Country.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b2fd9975-9636-4a5c-b237-e1fbd4ab1215")]
		public virtual Country Country
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Country)DslModeling::DomainRoleInfo.GetRolePlayer(this, CountryDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CountryDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Country of a City
		/// <summary>
		/// Gets Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Country GetCountry(City element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CityDomainRoleId) as Country;
		}
		
		/// <summary>
		/// Sets Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCountry(City element, Country newCountry)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CityDomainRoleId, newCountry);
		}
		#endregion
		#region City domain role code
		
		/// <summary>
		/// City domain role Id.
		/// </summary>
		public static readonly global::System.Guid CityDomainRoleId = new global::System.Guid(0x6531dafc, 0x338f, 0x4180, 0xa8, 0x5b, 0xcb, 0xf3, 0xd1, 0xc8, 0xad, 0x82);
		
		/// <summary>
		/// DomainRole City
		/// Description for Company.Language12.CountryHasCities.City
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.CountryHasCities/City.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.CountryHasCities/City.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Country", PropertyDisplayNameKey="Company.Language12.CountryHasCities/City.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6531dafc-338f-4180-a85b-cbf3d1c8ad82")]
		public virtual City City
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (City)DslModeling::DomainRoleInfo.GetRolePlayer(this, CityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Cities of a Country
		/// <summary>
		/// Gets a list of Cities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<City> GetCities(Country element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<City>, City>(element, CountryDomainRoleId);
		}
		#endregion
		#region Country link accessor
		/// <summary>
		/// Get the list of CountryHasCities links to a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language12.CountryHasCities> GetLinksToCities ( global::Company.Language12.Country countryInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CountryHasCities>(countryInstance, global::Company.Language12.CountryHasCities.CountryDomainRoleId);
		}
		#endregion
		#region City link accessor
		/// <summary>
		/// Get the CountryHasCities link to a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language12.CountryHasCities GetLinkToCountry (global::Company.Language12.City cityInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Language12.CountryHasCities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CountryHasCities>(cityInstance, global::Company.Language12.CountryHasCities.CityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of City not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CountryHasCities instance accessors
		
		/// <summary>
		/// Get any CountryHasCities links between a given Country and a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language12.CountryHasCities> GetLinks( global::Company.Language12.Country source, global::Company.Language12.City target )
		{
			global::System.Collections.Generic.List<global::Company.Language12.CountryHasCities> outLinks = new global::System.Collections.Generic.List<global::Company.Language12.CountryHasCities>();
			global::System.Collections.Generic.IList<global::Company.Language12.CountryHasCities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CountryHasCities>(source, global::Company.Language12.CountryHasCities.CountryDomainRoleId);
			foreach ( global::Company.Language12.CountryHasCities link in links )
			{
				if ( target.Equals(link.City) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CountryHasCities link between a given Countryand a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language12.CountryHasCities GetLink( global::Company.Language12.Country source, global::Company.Language12.City target )
		{
			global::System.Collections.Generic.IList<global::Company.Language12.CountryHasCities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CountryHasCities>(source, global::Company.Language12.CountryHasCities.CountryDomainRoleId);
			foreach ( global::Company.Language12.CountryHasCities link in links )
			{
				if ( target.Equals(link.City) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Language12
{
	/// <summary>
	/// DomainRelationship CityHasPersons
	/// Description for Company.Language12.CityHasPersons
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language12.CityHasPersons.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language12.CityHasPersons.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language12.Language12DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b82cdec8-021f-4389-a328-7a4e0d2fb4ef")]
	public partial class CityHasPersons : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CityHasPersons domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb82cdec8, 0x021f, 0x4389, 0xa3, 0x28, 0x7a, 0x4e, 0x0d, 0x2f, 0xb4, 0xef);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CityHasPersons link in the same Partition as the given City
		/// </summary>
		/// <param name="source">City to use as the source of the relationship.</param>
		/// <param name="target">Person to use as the target of the relationship.</param>
		public CityHasPersons(City source, Person target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CityHasPersons.CityDomainRoleId, source), new DslModeling::RoleAssignment(CityHasPersons.PersonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CityHasPersons(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CityHasPersons(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CityHasPersons(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CityHasPersons(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region City domain role code
		
		/// <summary>
		/// City domain role Id.
		/// </summary>
		public static readonly global::System.Guid CityDomainRoleId = new global::System.Guid(0x716ff688, 0xc7d9, 0x47e9, 0xb7, 0xf7, 0x37, 0x68, 0x06, 0x51, 0x9f, 0x24);
		
		/// <summary>
		/// DomainRole City
		/// Description for Company.Language12.CityHasPersons.City
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.CityHasPersons/City.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.CityHasPersons/City.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Persons", PropertyDisplayNameKey="Company.Language12.CityHasPersons/City.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("716ff688-c7d9-47e9-b7f7-376806519f24")]
		public virtual City City
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (City)DslModeling::DomainRoleInfo.GetRolePlayer(this, CityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access City of a Person
		/// <summary>
		/// Gets City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static City GetCity(Person element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PersonDomainRoleId) as City;
		}
		
		/// <summary>
		/// Sets City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCity(Person element, City newCity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PersonDomainRoleId, newCity);
		}
		#endregion
		#region Person domain role code
		
		/// <summary>
		/// Person domain role Id.
		/// </summary>
		public static readonly global::System.Guid PersonDomainRoleId = new global::System.Guid(0xba4f3f36, 0xc512, 0x49e8, 0x94, 0xb4, 0xf5, 0x2b, 0xbf, 0xcb, 0xe4, 0x32);
		
		/// <summary>
		/// DomainRole Person
		/// Description for Company.Language12.CityHasPersons.Person
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.CityHasPersons/Person.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.CityHasPersons/Person.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "City", PropertyDisplayNameKey="Company.Language12.CityHasPersons/Person.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ba4f3f36-c512-49e8-94b4-f52bbfcbe432")]
		public virtual Person Person
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Person)DslModeling::DomainRoleInfo.GetRolePlayer(this, PersonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PersonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Persons of a City
		/// <summary>
		/// Gets a list of Persons.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Person> GetPersons(City element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(element, CityDomainRoleId);
		}
		#endregion
		#region City link accessor
		/// <summary>
		/// Get the list of CityHasPersons links to a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language12.CityHasPersons> GetLinksToPersons ( global::Company.Language12.City cityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CityHasPersons>(cityInstance, global::Company.Language12.CityHasPersons.CityDomainRoleId);
		}
		#endregion
		#region Person link accessor
		/// <summary>
		/// Get the CityHasPersons link to a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language12.CityHasPersons GetLinkToCity (global::Company.Language12.Person personInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Language12.CityHasPersons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CityHasPersons>(personInstance, global::Company.Language12.CityHasPersons.PersonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Person not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CityHasPersons instance accessors
		
		/// <summary>
		/// Get any CityHasPersons links between a given City and a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language12.CityHasPersons> GetLinks( global::Company.Language12.City source, global::Company.Language12.Person target )
		{
			global::System.Collections.Generic.List<global::Company.Language12.CityHasPersons> outLinks = new global::System.Collections.Generic.List<global::Company.Language12.CityHasPersons>();
			global::System.Collections.Generic.IList<global::Company.Language12.CityHasPersons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CityHasPersons>(source, global::Company.Language12.CityHasPersons.CityDomainRoleId);
			foreach ( global::Company.Language12.CityHasPersons link in links )
			{
				if ( target.Equals(link.Person) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CityHasPersons link between a given Cityand a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language12.CityHasPersons GetLink( global::Company.Language12.City source, global::Company.Language12.Person target )
		{
			global::System.Collections.Generic.IList<global::Company.Language12.CityHasPersons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CityHasPersons>(source, global::Company.Language12.CityHasPersons.CityDomainRoleId);
			foreach ( global::Company.Language12.CityHasPersons link in links )
			{
				if ( target.Equals(link.Person) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Language12
{
	/// <summary>
	/// DomainRelationship CityReferencesTargetCities
	/// Description for Company.Language12.CityReferencesTargetCities
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language12.CityReferencesTargetCities.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language12.CityReferencesTargetCities.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language12.Language12DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1c6f417d-30e2-42d9-ae6f-479187b3dd7e")]
	public partial class CityReferencesTargetCities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CityReferencesTargetCities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1c6f417d, 0x30e2, 0x42d9, 0xae, 0x6f, 0x47, 0x91, 0x87, 0xb3, 0xdd, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CityReferencesTargetCities link in the same Partition as the given City
		/// </summary>
		/// <param name="source">City to use as the source of the relationship.</param>
		/// <param name="target">City to use as the target of the relationship.</param>
		public CityReferencesTargetCities(City source, City target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CityReferencesTargetCities.SourceCityDomainRoleId, source), new DslModeling::RoleAssignment(CityReferencesTargetCities.TargetCityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CityReferencesTargetCities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CityReferencesTargetCities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CityReferencesTargetCities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CityReferencesTargetCities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceCity domain role code
		
		/// <summary>
		/// SourceCity domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceCityDomainRoleId = new global::System.Guid(0x6cfdd5f0, 0xd3f1, 0x48ee, 0x86, 0x1a, 0x65, 0xde, 0x84, 0x19, 0x03, 0x8a);
		
		/// <summary>
		/// DomainRole SourceCity
		/// Description for Company.Language12.CityReferencesTargetCities.SourceCity
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.CityReferencesTargetCities/SourceCity.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.CityReferencesTargetCities/SourceCity.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetCities", PropertyDisplayNameKey="Company.Language12.CityReferencesTargetCities/SourceCity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6cfdd5f0-d3f1-48ee-861a-65de8419038a")]
		public virtual City SourceCity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (City)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceCityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceCityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceCities of a City
		/// <summary>
		/// Gets a list of SourceCities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<City> GetSourceCities(City element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<City>, City>(element, TargetCityDomainRoleId);
		}
		#endregion
		#region TargetCity domain role code
		
		/// <summary>
		/// TargetCity domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetCityDomainRoleId = new global::System.Guid(0x06a565fe, 0x83d9, 0x4fae, 0x92, 0xc5, 0x48, 0x93, 0x44, 0x4d, 0x69, 0x3c);
		
		/// <summary>
		/// DomainRole TargetCity
		/// Description for Company.Language12.CityReferencesTargetCities.TargetCity
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.CityReferencesTargetCities/TargetCity.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.CityReferencesTargetCities/TargetCity.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceCities", PropertyDisplayNameKey="Company.Language12.CityReferencesTargetCities/TargetCity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("06a565fe-83d9-4fae-92c5-4893444d693c")]
		public virtual City TargetCity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (City)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetCityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetCityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetCities of a City
		/// <summary>
		/// Gets a list of TargetCities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<City> GetTargetCities(City element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<City>, City>(element, SourceCityDomainRoleId);
		}
		#endregion
		#region SourceCity link accessor
		/// <summary>
		/// Get the list of CityReferencesTargetCities links to a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language12.CityReferencesTargetCities> GetLinksToTargetCities ( global::Company.Language12.City sourceCityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CityReferencesTargetCities>(sourceCityInstance, global::Company.Language12.CityReferencesTargetCities.SourceCityDomainRoleId);
		}
		#endregion
		#region TargetCity link accessor
		/// <summary>
		/// Get the list of CityReferencesTargetCities links to a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language12.CityReferencesTargetCities> GetLinksToSourceCities ( global::Company.Language12.City targetCityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CityReferencesTargetCities>(targetCityInstance, global::Company.Language12.CityReferencesTargetCities.TargetCityDomainRoleId);
		}
		#endregion
		#region CityReferencesTargetCities instance accessors
		
		/// <summary>
		/// Get any CityReferencesTargetCities links between a given City and a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Language12.CityReferencesTargetCities> GetLinks( global::Company.Language12.City source, global::Company.Language12.City target )
		{
			global::System.Collections.Generic.List<global::Company.Language12.CityReferencesTargetCities> outLinks = new global::System.Collections.Generic.List<global::Company.Language12.CityReferencesTargetCities>();
			global::System.Collections.Generic.IList<global::Company.Language12.CityReferencesTargetCities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CityReferencesTargetCities>(source, global::Company.Language12.CityReferencesTargetCities.SourceCityDomainRoleId);
			foreach ( global::Company.Language12.CityReferencesTargetCities link in links )
			{
				if ( target.Equals(link.TargetCity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CityReferencesTargetCities link between a given Cityand a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Language12.CityReferencesTargetCities GetLink( global::Company.Language12.City source, global::Company.Language12.City target )
		{
			global::System.Collections.Generic.IList<global::Company.Language12.CityReferencesTargetCities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Language12.CityReferencesTargetCities>(source, global::Company.Language12.CityReferencesTargetCities.SourceCityDomainRoleId);
			foreach ( global::Company.Language12.CityReferencesTargetCities link in links )
			{
				if ( target.Equals(link.TargetCity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
