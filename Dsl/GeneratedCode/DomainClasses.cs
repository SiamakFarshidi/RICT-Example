//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.Language12
{
	/// <summary>
	/// DomainClass World
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language12.World.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language12.World.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language12.Language12DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4c25f34c-c4d9-4acb-b999-a6dc8d92b63e")]
	public partial class World : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// World domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4c25f34c, 0xc4d9, 0x4acb, 0xb9, 0x99, 0xa6, 0xdc, 0x8d, 0x92, 0xb6, 0x3e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public World(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public World(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Country> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Country>, Country>(global::Company.Language12.WorldHasContries.WorldDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Language12.Country.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Language12.Country sourceCountry1 = sourceElement as global::Company.Language12.Country;
			if (sourceCountry1 != null)
			{
				// Create link for path WorldHasContries.Elements
				this.Elements.Add(sourceCountry1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Language12.Country sourceCountry1 = sourceElement as global::Company.Language12.Country;
			if (sourceCountry1 != null)
			{
				// Delete link for path WorldHasContries.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.Language12.WorldHasContries.GetLinks((global::Company.Language12.World)this, sourceCountry1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Language12.WorldHasContries.WorldDomainRoleId, global::Company.Language12.WorldHasContries.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Language12
{
	/// <summary>
	/// DomainClass Country
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language12.Country.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language12.Country.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language12.Language12DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("01c501ac-f593-4c6d-83e9-28da8bcefa99")]
	public partial class Country : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Country domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x01c501ac, 0xf593, 0x4c6d, 0x83, 0xe9, 0x28, 0xda, 0x8b, 0xce, 0xfa, 0x99);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Country(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Country(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa2680c15, 0x1b2a, 0x4f52, 0x92, 0xbb, 0xc5, 0xe0, 0x0e, 0xe6, 0x72, 0x53);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.Language12.Country.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.Country/Name.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.Country/Name.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("a2680c15-1b2a-4f52-92bb-c5e00ee67253")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Country.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Country, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Country.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Country.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Country element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Country element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Flag domain property code
		
		/// <summary>
		/// Flag domain property Id.
		/// </summary>
		public static readonly global::System.Guid FlagDomainPropertyId = new global::System.Guid(0xc4b8264e, 0xf248, 0x42ae, 0xb9, 0x43, 0x16, 0x43, 0x08, 0x3f, 0xc1, 0xf8);
		
		/// <summary>
		/// Storage for Flag
		/// </summary>
		private global::System.String flagPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Flag domain property.
		/// Description for Company.Language12.Country.Flag
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.Country/Flag.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.Country/Flag.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c4b8264e-f248-42ae-b943-1643083fc1f8")]
		public global::System.String Flag
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return flagPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FlagPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Country.Flag domain property.
		/// </summary>
		internal sealed partial class FlagPropertyHandler : DslModeling::DomainPropertyValueHandler<Country, global::System.String>
		{
			private FlagPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Country.Flag domain property value handler.
			/// </summary>
			public static readonly FlagPropertyHandler Instance = new FlagPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Country.Flag domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FlagDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Country element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.flagPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Country element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.flagPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region World opposite domain role accessor
		/// <summary>
		/// Gets or sets World.
		/// </summary>
		public virtual World World
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Language12.WorldHasContries.ElementDomainRoleId) as World;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Language12.WorldHasContries.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// Description for Company.Language12.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Country> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Country>, Country>(global::Company.Language12.CountryReferencesTargets.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// Description for Company.Language12.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Country> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Country>, Country>(global::Company.Language12.CountryReferencesTargets.TargetDomainRoleId);
			}
		}
		#endregion
		#region Cities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Cities.
		/// Description for Company.Language12.CountryHasCities.Country
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<City> Cities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<City>, City>(global::Company.Language12.CountryHasCities.CountryDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Language12.City.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Language12.City sourceCity1 = sourceElement as global::Company.Language12.City;
			if (sourceCity1 != null)
			{
				// Create link for path CountryHasCities.Cities
				this.Cities.Add(sourceCity1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Language12.City sourceCity1 = sourceElement as global::Company.Language12.City;
			if (sourceCity1 != null)
			{
				// Delete link for path CountryHasCities.Cities
				
				foreach (DslModeling::ElementLink link in global::Company.Language12.CountryHasCities.GetLinks((global::Company.Language12.Country)this, sourceCity1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Language12.CountryHasCities.CountryDomainRoleId, global::Company.Language12.CountryHasCities.CityDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Language12
{
	/// <summary>
	/// DomainClass City
	/// Description for Company.Language12.City
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language12.City.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language12.City.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language12.Language12DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("29e5c664-f080-491a-907d-7685136526c7")]
	public partial class City : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// City domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x29e5c664, 0xf080, 0x491a, 0x90, 0x7d, 0x76, 0x85, 0x13, 0x65, 0x26, 0xc7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public City(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public City(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x89ea6c23, 0x8943, 0x4ab4, 0xac, 0x23, 0x56, 0xf6, 0x42, 0x44, 0x64, 0x8c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.Language12.City.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.City/Name.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.City/Name.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("89ea6c23-8943-4ab4-ac23-56f64244648c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the City.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<City, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the City.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the City.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(City element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(City element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Population domain property code
		
		/// <summary>
		/// Population domain property Id.
		/// </summary>
		public static readonly global::System.Guid PopulationDomainPropertyId = new global::System.Guid(0xae813b01, 0x1698, 0x467e, 0xae, 0x13, 0x1f, 0x97, 0x8f, 0xf3, 0x01, 0xf2);
		
		/// <summary>
		/// Storage for Population
		/// </summary>
		private global::System.UInt32 populationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Population domain property.
		/// Description for Company.Language12.City.Population
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.City/Population.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.City/Population.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ae813b01-1698-467e-ae13-1f978ff301f2")]
		public global::System.UInt32 Population
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return populationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PopulationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the City.Population domain property.
		/// </summary>
		internal sealed partial class PopulationPropertyHandler : DslModeling::DomainPropertyValueHandler<City, global::System.UInt32>
		{
			private PopulationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the City.Population domain property value handler.
			/// </summary>
			public static readonly PopulationPropertyHandler Instance = new PopulationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the City.Population domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PopulationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.UInt32 GetValue(City element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.populationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(City element, global::System.UInt32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.UInt32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.populationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Location domain property code
		
		/// <summary>
		/// Location domain property Id.
		/// </summary>
		public static readonly global::System.Guid LocationDomainPropertyId = new global::System.Guid(0x9826b802, 0x3135, 0x4e85, 0x9f, 0xe1, 0x01, 0x2c, 0xd1, 0x13, 0x63, 0x57);
		
		/// <summary>
		/// Storage for Location
		/// </summary>
		private global::System.String locationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Location domain property.
		/// Description for Company.Language12.City.Location
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.City/Location.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.City/Location.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9826b802-3135-4e85-9fe1-012cd1136357")]
		public global::System.String Location
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return locationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the City.Location domain property.
		/// </summary>
		internal sealed partial class LocationPropertyHandler : DslModeling::DomainPropertyValueHandler<City, global::System.String>
		{
			private LocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the City.Location domain property value handler.
			/// </summary>
			public static readonly LocationPropertyHandler Instance = new LocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the City.Location domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(City element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.locationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(City element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.locationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Country opposite domain role accessor
		/// <summary>
		/// Gets or sets Country.
		/// Description for Company.Language12.CountryHasCities.City
		/// </summary>
		public virtual Country Country
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Language12.CountryHasCities.CityDomainRoleId) as Country;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Language12.CountryHasCities.CityDomainRoleId, value);
			}
		}
		#endregion
		#region Persons opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Persons.
		/// Description for Company.Language12.CityHasPersons.City
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Person> Persons
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(global::Company.Language12.CityHasPersons.CityDomainRoleId);
			}
		}
		#endregion
		#region TargetCities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetCities.
		/// Description for Company.Language12.CityReferencesTargetCities.SourceCity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<City> TargetCities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<City>, City>(global::Company.Language12.CityReferencesTargetCities.SourceCityDomainRoleId);
			}
		}
		#endregion
		#region SourceCities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceCities.
		/// Description for Company.Language12.CityReferencesTargetCities.TargetCity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<City> SourceCities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<City>, City>(global::Company.Language12.CityReferencesTargetCities.TargetCityDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Language12.Person.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Language12.Person sourcePerson1 = sourceElement as global::Company.Language12.Person;
			if (sourcePerson1 != null)
			{
				// Create link for path CityHasPersons.Persons
				this.Persons.Add(sourcePerson1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Language12.Person sourcePerson1 = sourceElement as global::Company.Language12.Person;
			if (sourcePerson1 != null)
			{
				// Delete link for path CityHasPersons.Persons
				
				foreach (DslModeling::ElementLink link in global::Company.Language12.CityHasPersons.GetLinks((global::Company.Language12.City)this, sourcePerson1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Language12.CityHasPersons.CityDomainRoleId, global::Company.Language12.CityHasPersons.PersonDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Language12
{
	/// <summary>
	/// DomainClass Person
	/// Description for Company.Language12.Person
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Language12.Person.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Language12.Person.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Language12.Language12DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0e87d30c-bfbd-4e1c-8e91-3ec36e598106")]
	public partial class Person : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Person domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0e87d30c, 0xbfbd, 0x4e1c, 0x8e, 0x91, 0x3e, 0xc3, 0x6e, 0x59, 0x81, 0x06);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Person(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Person(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xe214c4f0, 0x52a4, 0x49d3, 0x82, 0x52, 0xe6, 0x58, 0x7a, 0x54, 0xf7, 0xfe);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.Language12.Person.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.Person/Name.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.Person/Name.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e214c4f0-52a4-49d3-8252-e6587a54f7fe")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Person.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Person, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Person element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Gender domain property code
		
		/// <summary>
		/// Gender domain property Id.
		/// </summary>
		public static readonly global::System.Guid GenderDomainPropertyId = new global::System.Guid(0x1d461642, 0x540b, 0x4e3e, 0x90, 0xff, 0x43, 0x43, 0xb6, 0x80, 0x7b, 0x5b);
		
		/// <summary>
		/// Storage for Gender
		/// </summary>
		private global::System.String genderPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Gender domain property.
		/// Description for Company.Language12.Person.Gender
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.Person/Gender.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.Person/Gender.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1d461642-540b-4e3e-90ff-4343b6807b5b")]
		public global::System.String Gender
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return genderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GenderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Person.Gender domain property.
		/// </summary>
		internal sealed partial class GenderPropertyHandler : DslModeling::DomainPropertyValueHandler<Person, global::System.String>
		{
			private GenderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.Gender domain property value handler.
			/// </summary>
			public static readonly GenderPropertyHandler Instance = new GenderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.Gender domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GenderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.genderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Person element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.genderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Age domain property code
		
		/// <summary>
		/// Age domain property Id.
		/// </summary>
		public static readonly global::System.Guid AgeDomainPropertyId = new global::System.Guid(0x89a8c048, 0x7646, 0x4f73, 0x9b, 0x2e, 0xd2, 0x7c, 0x65, 0xa6, 0xce, 0x45);
		
		/// <summary>
		/// Storage for Age
		/// </summary>
		private global::System.UInt16 agePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Age domain property.
		/// Description for Company.Language12.Person.Age
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Language12.Person/Age.DisplayName", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Language12.Person/Age.Description", typeof(global::Company.Language12.Language12DomainModel), "Company.Language12.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("89a8c048-7646-4f73-9b2e-d27c65a6ce45")]
		public global::System.UInt16 Age
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return agePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AgePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Person.Age domain property.
		/// </summary>
		internal sealed partial class AgePropertyHandler : DslModeling::DomainPropertyValueHandler<Person, global::System.UInt16>
		{
			private AgePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.Age domain property value handler.
			/// </summary>
			public static readonly AgePropertyHandler Instance = new AgePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.Age domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AgeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.UInt16 GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.agePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Person element, global::System.UInt16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.UInt16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.agePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region City opposite domain role accessor
		/// <summary>
		/// Gets or sets City.
		/// Description for Company.Language12.CityHasPersons.Person
		/// </summary>
		public virtual City City
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Language12.CityHasPersons.PersonDomainRoleId) as City;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Language12.CityHasPersons.PersonDomainRoleId, value);
			}
		}
		#endregion
	}
}
